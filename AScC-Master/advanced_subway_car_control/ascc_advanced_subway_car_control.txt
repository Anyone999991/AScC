@name advanced_subway_car_control/AScC_Advanced_Subway_car_Control
@inputs On MU_Master Pod:entity Trucks:array MU_In_Front:array MU_In_Rear:array DoorInfo:array
@outputs MPH Throttle Accelerate OperatorKey OperatorKeyRemoved Brake BrakePressure MU_Out_Rear:array MU_Out_Front:array MUInfo:array



@persist MaxSpeed MaxSpd Mul Throttle BrakePressure OperatorKey BrakeMul Brake_Release:string MU_Out_Rear:array MU_Out_Front:array MU_Out:array
@persist Brake OperatorKeyRemoved BrakeSpd ACC Accelerate Shift:string [Controls Routing]:table [E O Body Driver]:entity FlangeSound TB TB1
@persist [TractionMotorSound Wheel_Sound Brake_Sound Flange_Sound]:string EngineMin EngineMax Braking Spd Angle Angle2 Total Speed Cars

@trigger
@model models/jaanus/wiretool/wiretool_speed.mdl


#Advanced Subway car Control
#based on OLC but heavily modified
#MU doesnt work yet

if(first()|dupefinished()){
Controls = table()
#include "advanced_subway_car_control/version/version"

    #Config


#Controls, they work pretty similar PT2

Shift = "lshift"                #shift key, works the same as in PT2, put " +Shift" behind key names to use shift

Controls["NotchUp",string]      = "D"
Controls["NotchDown",string]    = "A"
Controls["Accelerate",string]   = "F"       #Shift isn't Recommended because you need to be holding this to accelerate

Controls["ReverserF",string]    = "W"
Controls["ReverserB",string]    = "S"

Controls["BrakeUp",string]      = "W +Shift"
Controls["BrakeDown",string]    = "S +Shift"

Controls["EmBrake",string]      = "rshift"

#other stuff

    BrakeSpd = 2.5  #Brake Lever Steps (Max is 10)

    MaxSpeed = 55   #Top Speed in MPH
    
    Cars = 1        #Amount of (Powered) cars
    
    Mul = 120         #Force multiplier, 120 is default
    BrakeMul = 300    #Brake force multiplier
    
#Sounds

    TractionMotorSound = "nycta/r1-r9/motor1.wav"   
    Wheel_Sound = "priority's sounds/cta/cta_l_wheelsounds_loop.wav"
    Brake_Sound = "nycta/r21-22/flange0.wav"
    Brake_Release = "gsgtrainsounds/misc/airbrakes/air_ind_release2.wav"
    Flange_Sound = "nycta/r21-22/flange3.wav"
    
    #End of Config





    EngineMin = 70 #Minimum TM pitch
    EngineMax = 130 #Maximum TM pitch

    
    MaxSpd = MaxSpeed*23.466

    Throttle = 0
    Brake = 10
    E = entity()
    O = owner()

    #Controls Init, taken from rlcpt (going to change this soon)
    foreach(K,V:string = Controls){
        if(V:find(" +Shift")){
            Routing[K,number] = 1
            local EXP = V:explode(" ")
            Controls[K,string] = EXP[1,string]
        }else{
            Routing[K,number] = 0
        }
    }

#MU assignment

#[local MU_Out = array(
1,
0,
0,
0,
0,
0,
0,
0
)
MU_Out_Rear = MU_Out_Front =MU_Out:clone()
timer("mu_update_out",1000)
timer("mu_update",1000)]#

#check for version on github

runOnHTTP(1)
httpRequest("https://raw.githubusercontent.com/Anyone999991/AScC/master/AScC-Master/advanced_subway_car_control/version/version.txt")

#make a timer to stop it after a while (timeout)

timer("version_check",8000)

#name

setName("Advanced Subway car Control\nV"+Main_Version)

#truck material application

function void releaseBrake()
{
    local TrucksB = Body:getConstraints()
    foreach(TB,TB1:entity=TrucksB)
        {
        TB1:propPhysicalMaterial("friction_00")
        TB1:propDrag(0)
    }
}
function void applyBrake()
{
    local TrucksB = Body:getConstraints()
    foreach(TB,TB1:entity=TrucksB)
        {
        TB1:propPhysicalMaterial("metal")
        TB1:propDrag(100)
    }
}







}#end of if(first)








interval(50)

if(clk("version_check"))
{
runOnHTTP(0)
hint("NIGGA YOUR INTERNET OFF HOW TF YOU EVEN PLAYIN GMOD?",7)
O:soundPlay(6,0,"titus's_trainbuild_content_pack_1.1/memes/threat1.wav")
stoptimer("version_check")
}
elseif(httpClk())
{
runOnHTTP(0)
stoptimer("version_check")

local VersionE2explode = httpData():explode(" ")
local VersionE2 = VersionE2explode[4,string]
if(VersionE2:toNumber()>Main_Version)
{
hint("You are using an outdated version of AScC",7)
O:soundPlay(6,0,"phx/hmetal1.wav")
}
elseif(VersionE2:toNumber()<Main_Version)
{
hint("You are using a developer version of AScC",7)
O:soundPlay(6,0,"buttons/button3.wav")
}
else
{
hint("AScC is the most recent version",7)
}

print("AScC GitHub Version: "+VersionE2+"You have AScC Version: "+Main_Version)
}

if(On){
    
    #sound init
    if(~On){
        Body = E:isWeldedTo()
        Body:soundPlay(0,0,TractionMotorSound)
        soundVolume(0,0)
        Body:soundPlay(1,0,Wheel_Sound)
        soundVolume(1,1)
        Body:soundPlay(2,0,Brake_Sound)
        soundVolume(2,0)
        Body:soundPlay(4,0,Flange_Sound)
        soundVolume(4,0)
    }

#--OUT--------MUInfo table (doors):

#MU Master
#OpenRight
#OpenLeft

#--IN---------DoorInfo table:

#OpenRight
#OpenLeft

#--IN-&-OUT---MU table:

#MU Connected
#Reverser
#Throttle
#Deadman ( Accelerate )
#Brake
#BrakePressure
#Doors Right
#Doors Left

#[MU_Front = (MU_In_Front[1,number])
MU_Rear = (MU_In_Rear[1,number])
MU_Connected = MU_Front | MU_Rear]#


if(MU_Master){
    OperatorKeyRemoved = 0
    Driver = Pod:driver()
    runOnKeys(Driver,1)

    if(keyClk(Driver)){
    
    local Shifting = Driver:keyPressed(Shift)
    
    local ReverserF = Driver:keyPressed(Controls["ReverserF",string]) & (Routing["ReverserF",number] ? Shifting : !Shifting)
    local ReverserB = Driver:keyPressed(Controls["ReverserB",string]) & (Routing["ReverserB",number] ? Shifting : !Shifting)
    local NotchUp   = Driver:keyPressed(Controls["NotchUp",string]) & (Routing["NotchUp",number] ? Shifting : !Shifting)
    local NotchDown = Driver:keyPressed(Controls["NotchDown",string]) & (Routing["NotchDown",number] ? Shifting : !Shifting)
    
    Accelerate = Driver:keyPressed(Controls["Accelerate",string]) & (Routing["Accelerate",number] ? Shifting : !Shifting)
    #[if(ACC & changed(ACC)){
        Accelerate=1
    }else{
        Accelerate=0
    }]#
    
    local BrakeUp = Driver:keyPressed(Controls["BrakeUp",string]) & (Routing["BrakeUp",number] ? Shifting : !Shifting)
    local BrakeDown = Driver:keyPressed(Controls["BrakeDown",string]) & (Routing["BrakeDown",number] ? Shifting : !Shifting)
    
    #Throttle Controlling

    if(NotchUp|NotchDown){
        Throttle += (NotchUp - NotchDown)
        Throttle = clamp(Throttle,0,3)  
    }
    
    #Brake Lever Controlling
       
    if(BrakeUp|BrakeDown){
        Brake += (BrakeUp-BrakeDown)*(1*BrakeSpd)
        Brake = clamp(Brake,0,10)
    }
    
    #Operator Key Controlling
    
    if((ReverserF|ReverserB)&Throttle==0){
        OperatorKey += (ReverserF - ReverserB)
        OperatorKey = clamp(OperatorKey,-1,1)
    }
    
}

#[if((MU_In_Rear[1,number] | MU_In_Front[1,number])){
stoptimer("mu_update_out")
timer("mu_update_out",1000)
MU_Out_Rear = array(1,-OperatorKey,Throttle,Accelerate,Brake,BrakePressure,-DoorInfo[1,number],-DoorInfo[2,number] )
MU_Out_Front = array(1,OperatorKey,Throttle,Accelerate,Brake,BrakePressure,DoorInfo[1,number],DoorInfo[2,number] )
}else{
MU_Out_Front = array(1)
MU_Out_Rear = array(1)
}]#

#--IN-&-OUT---MU table:

#MU Connected
#Reverser
#Throttle
#Deadman ( Accelerate )
#Brake
#BrakePressure
#Doors Right
#Doors Left

#brake pressure

if(BrakePressure < Brake*10){
        BrakePressure+= 2
    }elseif(BrakePressure > Brake*10){
        BrakePressure+= -3
    }
    clamp(BrakePressure,0,100)
    

}else{

OperatorKeyRemoved = 1




#[if((MU_In_Front[1,number] | MU_In_Rear[1,number])){
    stoptimer("mu_update")
    timer("mu_update",1000)
        
        
    Reverser = -MU_In_Front[2,number] + MU_In_Rear[2,number]

    Throttle = clamp(MU_In_Front[3,number] + MU_In_Rear[3,number],0,3)
        
    Accelerate = MU_In_Front[4,number] + MU_In_Rear[4,number]
        
    BrakePressure = clamp(MU_In_Front[6,number] + MU_In_Rear[6,number],0,100)
        
    MU_Out_Rear = MU_In_Front:clone()
    MU_Out_Front = MU_In_Rear:clone()
        
}]#

#local DoorsRight = !MU_In_Front[7,number] + MU_In_Rear[8,number]
#local DoorsLeft  = MU_In_Front[7,number] + !MU_In_Rear[8,number]
        
#MUInfo = array(1,DoorsRight,DoorsLeft)

}

    
    Braking = BrakePressure>0 ? 1 : 0
    
    #Velocity Info Gathering
    Vel = -E:velL():z()
    Spd = abs(Vel)
    MPH = toUnit("mph",Spd)
    
    #Sound Pitch & Volume Adjustment
    
    soundPitch(0,EngineMin + (EngineMax - EngineMin)*abs(MPH)/MaxSpeed)
    soundVolume(0,MPH>0.5? Throttle/3+0.3 : 0)
    
    soundPitch(1,Spd > 15 ? Spd/10 : 0)
    
    if(BrakePressure>0){
    soundPitch(2,clamp(Spd/(MaxSpd/100),75,100))
    soundVolume(2,(Spd > 15 & Braking == 1) ? BrakePressure/50*0.25 + Spd/(MaxSpd*2) : 0)
    }else{
    soundVolume(2,0)
    }
    
    
    #flange sound calculation

    Angle = Body:angles():yaw()
    Angle2 = Trucks[1,entity]:angles():yaw()   
    Total = round(Angle - Angle2)
    Speed = Body:velL():length()   
    if((Total < 0 & Total > -357) | Total > 3)
    {
    FlangeSound = 1
    }
    else#if(Total == 0 | Total < 3 | Total > -3 | Total < -357)
    {
    FlangeSound = 0
    }

    soundVolume(4,FlangeSound*((abs(MPH)/MaxSpeed)*0.2))
    
    #Force Application
    Dir = -E:up()
    TargetSpeed = (MaxSpd)*(Throttle/3)*OperatorKey
    
    if(Accelerate){
    Body:applyForce(Dir*(TargetSpeed - Vel)*(Mul*2*Cars))
    }
    
if(BrakePressure>0 & Spd>15)
{
    Body:applyForce(E:up()*(BrakePressure*(Vel/50))*(BrakeMul*2*Cars))
}
elseif(changed(BrakePressure)&(BrakePressure>0 & Spd<15))
{
    applyBrake()
}
elseif(changed(BrakePressure)&BrakePressure==0)
{
    releaseBrake()
    soundPlay(3,0,Brake_Release)
}


    
}else{
    if(~On){
        Throttle = Vel = Spd = MPH = OperatorKey = 0
        OperatorKeyRemoved = 1
        soundStop(0)
        soundStop(1)
        soundStop(2)
        soundStop(3)
        soundStop(4)
    }
}

